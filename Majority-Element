Brute-force solution

for(int i = 0; i<n; i++){
   int count = 0;
   for(int j = 0; j<n; j++){
     count++;
     if(arr[i] == arr[j]){
        count++;
     }
    if(count > n/2){
      return arr[i];
    }
    else{
      return -1;
    }
  }
}

 // Time Complexity: O(n^2)




Better Solution (Using Hashing)

for(int i = 0;i<v.size();i++){
	map[v[i]]++;
}
for(auto it: mpp) {
	if(it.second > (v.size() / 2)){
		return it.first;
	}
}
return -1



Optimal Solution (Moor's Voting Algorithm)

int count = 0;
	int element = 0;
	for(int i = 0;i<v.size();i++){
		if(count == 0){
			count = 1;
			element = v[i];
		}
		else if (v[i] == element){
			count++;
		}
		else{
			count--;
		}
	}
	int counter = 1;
	for(int i = 0;i<v.size();i++){
		if(v[i] == element){
			counter++;
		}
	}
	if(counter > v.size() / 2){
		return element;
	}
	return -1;

// Time Complexity : O(n) + O(n)
// Space Complexity : O(1)
